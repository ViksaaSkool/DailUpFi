apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
kapt {
    generateStubs = true
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.viksaa.dailupfi.app"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            zipAlignEnabled true
            manifestPlaceholders.appName = "DailUpFi"
            versionNameSuffix "_build"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix "_debug_" + "build"
            manifestPlaceholders.appName = "DailUpFi"
            minifyEnabled false
            debuggable true
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    signingConfigs {
        release {
            storeFile file(getPropertyValue('keystore.properties', 'storePath'))
            storePassword getPropertyValue('keystore.properties', 'storePass')
            keyAlias getPropertyValue('keystore.properties', 'alias')
            keyPassword getPropertyValue('keystore.properties', 'pass')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    //kotlin
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.core:core-ktx:$rootProject.androidKTXVersion"

    //support
    implementation "androidx.appcompat:appcompat:$rootProject.supportVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "com.google.android.material:material:$rootProject.designVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"
    implementation "com.airbnb.android:lottie:$rootProject.lottieVersion"


    //test
    testImplementation "junit:junit:$rootProject.jUnitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"

    //third party
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$rootProject.leakCanaryVersion"
}


task setAPKName() {
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date().format("yyyy_MM_dd_HH_mm")
            def newApkName = variant.buildType.manifestPlaceholders.appName + variant.buildType.versionNameSuffix + "_" + date + ".apk"
            output.outputFileName = newApkName
        }
    }
}

gradle.taskGraph.whenReady {
    setAPKName
}

//get property file method
def getPropertyValue(propertyFileName, propertyName) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file(propertyFileName).newDataInputStream())
    return properties[propertyName]
}

